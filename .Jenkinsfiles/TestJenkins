pipeline {
    agent { label 'Africa' }
    environment {
        NUGET_API_KEY = credentials('private_nuget_api_key')
        NUGET_SERVER_URL = credentials('private_nuget_uri')
        SONARQUBE_EXCLUDE_FILES = "**/*.xml,**/*.json,**/*.html,**/*.css,**/*.js,**/Program.cs,**/Startup.cs,**/Migrations/**"
        VERSION = "1.0.5"
    }

    stages {
        stage('Restore dependencies') {
            steps {
                echo 'Restoring project dependencies...'
                sh 'dotnet restore Auth.sln'
            }
        }
        stage('SonarQube Analysis') {
            steps {
                script {
                    def scannerHome = tool 'SonarQ-DotNET8'
                    withSonarQubeEnv('SonarQ') {
                        sh "dotnet ${scannerHome}/SonarScanner.MSBuild.dll begin /k:\"Auth\" /v:${VERSION} /d:sonar.exclusions=${SONARQUBE_EXCLUDE_FILES}"
                        sh "dotnet build"
                        sh "dotnet ${scannerHome}/SonarScanner.MSBuild.dll end"
                    }
                }
            }
        }
        stage('Quality Gate') {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    script {
                        def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                            error "Pipeline aborted due to quality gate failure: ${qg.status}"
                        }
                    }
                }
            }
        }
        stage('Build') {
            steps {
                echo 'Building the project...'
                sh 'dotnet build --configuration Release -p:Version=${VERSION}'
            }
        }
        stage('Create NuGet package') {
            steps {
                echo 'Packing the project...'
                sh 'dotnet clean Auth.sln'
                sh 'dotnet pack Auth.Infraestructure.Identity/Auth.Infraestructure.Identity.csproj --configuration Release -p:Version=${VERSION} --output ./nupkgs'
            }
        }
        stage('Publish NuGet package') {
            steps {
                echo 'Uploading NuGet package to the repository...'
                sh '''
                dotnet nuget push ./nupkgs/*.nupkg \
                    --source $NUGET_SERVER_URL \
                    --api-key $NUGET_API_KEY \
                    --skip-duplicate
                '''
            }
        }
    }
}